{#
/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link          https://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       https://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
{% set compact = ["'#{singularName}'"] %}
    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
		$redirect['action'] 		= 'index';
		$redirect['?']['sort'] 		= $this->request->getQuery('id') ?? 'id';
		$redirect['?']['direction'] = $this->request->getQuery('direction') ?? 'desc';

		$limit = $this->request->getQuery('limit') ?? 2;
		$page = $this->request->getQuery('page') ?? 1;
		$lastId = $this->request->getQuery('lastId') ?? 0;

        ${{ singularName }} = $this->{{ currentModelName }}->newEmptyEntity();
        if ($this->request->is('post')) {
			$data = $this->request->getData();
			//debug($data); die();
			
            ${{ singularName }} = $this->{{ currentModelName }}->patchEntity(${{ singularName }}, $data);
            if ($this->{{ currentModelName }}->save(${{ singularName }})) {
                //$this->Flash->success(__('The {{ singularHumanName|lower }} has been saved.'));
                $this->Flash->success(__('Has been saved.'));
				$redirect['?']['lastId'] = ${{ singularName }}->id;
				//debug($redirect); die();

                return $this->redirect($redirect);
            }
            //$this->Flash->error(__('The {{ singularHumanName|lower }} could not be saved. Please, try again.'));
            $this->Flash->error(__('Could not be saved. Please, try again.'));
        }
{% set associations = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
{% set associations = associations|merge(Bake.aliasExtractor(modelObj, 'BelongsToMany')) %}

{%- for assoc in associations %}
    {%- set otherName = Bake.getAssociatedTableAlias(modelObj, assoc) %}
    {%- set otherPlural = otherName|variable %}
        ${{ otherPlural }} = $this->{{ currentModelName }}->{{ otherName }}->find('list', limit: 200, order: ['modified' => 'desc'])->all();
        {{- "\n" }}
    {%- set compact = compact|merge(["'#{otherPlural}'"]) %}
{% endfor %}
        $this->set(compact({{ compact|join(', ')|raw }}));
    }
